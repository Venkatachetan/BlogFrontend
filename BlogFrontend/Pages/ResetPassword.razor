@page "/reset-password"
@layout LoginLayout
@using BlogFrontend.Models
@using BlogFrontend.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ILogger<ResetPassword> Logger

<div class="d-flex justify-center align-center" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(135deg, #6559ae, #e91e63); width: 100vw; height: 100vh;">
    <div class="text-center" style="max-width: 400px; width: 100%; padding: 40px 20px; background-color: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);">
        <div class="mb-6">
            <MudIcon Icon="@Icons.Material.Filled.Article" Style="color: #e91e63; font-size: 40px;" Class="mb-2" />
            <MudText Typo="Typo.h5" Class="font-weight-bold" Style="color: #333;">Blog Application</MudText>
        </div>

        <MudText Typo="Typo.h5" Class="mb-4" Style="color: #333;">Reset Your Password</MudText>

        <MudText Typo="Typo.body2" Style="color: #666;" Class="mb-5 px-4">
            Enter your new password below to reset your account.
        </MudText>

        @if (messages.Any())
        {
            <div class="mb-4 px-4">
                @foreach (var message in messages)
                {
                    <MudAlert Severity="@message.Severity" Class="mb-2" Style="border-radius: 4px;">
                        @message.Text
                    </MudAlert>
                }
            </div>
        }

        <MudForm Class="mt-4">
            <div class="px-4">
                <div class="mb-4">
                    <MudText Typo="Typo.caption" Class="d-block text-left mb-1" Style="color: #666;">New Password</MudText>
                    <MudTextField @bind-Value="resetPasswordRequest.NewPassword"
                                  Placeholder="New Password"
                                  Variant="Variant.Outlined"
                                  Label=""
                                  InputType="InputType.Password"
                                  FullWidth="true"
                                  Disabled="string.IsNullOrEmpty(resetPasswordRequest.Token) || isLoading" />
                </div>

                <div class="mb-4">
                    <MudText Typo="Typo.caption" Class="d-block text-left mb-1" Style="color: #666;">Confirm Password</MudText>
                    <MudTextField @bind-Value="resetPasswordRequest.ConfirmPassword"
                                  Placeholder="Confirm Password"
                                  Variant="Variant.Outlined"
                                  Label=""
                                  InputType="InputType.Password"
                                  FullWidth="true"
                                  Disabled="string.IsNullOrEmpty(resetPasswordRequest.Token) || isLoading" />
                </div>

                <div class="d-flex justify-center mt-6">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Style="border-radius: 4px; width: 100%;"
                               OnClick="Submit"
                               Size="Size.Large"
                               Disabled="isLoading || string.IsNullOrEmpty(resetPasswordRequest.Token)">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                            <span>Resetting...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </MudButton>
                </div>
            </div>
        </MudForm>

        <div class="d-flex justify-center mt-6 pt-4" style="border-top: 1px solid #eee;">
            <MudText Typo="Typo.body2" Style="color: #666;">Remembered your password?</MudText>
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       OnClick="@(() => Navigation.NavigateTo("/login"))"
                       Style="padding: 0px 6px; min-width: 0; font-weight: 500;"
                       Disabled="isLoading">
                Log in
            </MudButton>
        </div>
    </div>
</div>

@code {
    private ResetPasswordRequest resetPasswordRequest = new ResetPasswordRequest();
    private bool isLoading = false;
    private List<Message> messages = new List<Message>();

    private class Message
    {
        public string Text { get; set; } = string.Empty;
        public Severity Severity { get; set; }
    }

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = uri.Query;

        if (!string.IsNullOrEmpty(query))
        {
            var parameters = System.Web.HttpUtility.ParseQueryString(query.TrimStart('?'));

            if (parameters["access_token"] is string token)
            {
                resetPasswordRequest.Token = token;
            }
            else
            {
                Logger.LogError("Missing access_token in query string.");
                messages.Add(new Message { Text = "Invalid reset link. Missing access token.", Severity = Severity.Error });
            }
        }
        else
        {
            Logger.LogError("Missing query string in URL.");
            messages.Add(new Message { Text = "Invalid reset link.", Severity = Severity.Error });
        }
    }

    private async Task Submit()
    {
        try
        {
            isLoading = true;
            messages.Clear();

            if (string.IsNullOrEmpty(resetPasswordRequest.NewPassword) ||
                string.IsNullOrEmpty(resetPasswordRequest.ConfirmPassword))
            {
                messages.Add(new Message { Text = "Please fill in all fields", Severity = Severity.Error });
                isLoading = false;
                return;
            }

            if (resetPasswordRequest.NewPassword.Length < 6)
            {
                messages.Add(new Message { Text = "Password must be at least 6 characters long", Severity = Severity.Error });
                isLoading = false;
                return;
            }

            if (resetPasswordRequest.NewPassword != resetPasswordRequest.ConfirmPassword)
            {
                messages.Add(new Message { Text = "Passwords do not match", Severity = Severity.Error });
                isLoading = false;
                return;
            }

            var response = await AuthService.ResetPassword(
                resetPasswordRequest.Token,
                resetPasswordRequest.NewPassword,
                resetPasswordRequest.ConfirmPassword);

            if (response?.Message != null)
            {
                messages.Add(new Message { Text = response.Message, Severity = Severity.Success });
                await Task.Delay(3000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                messages.Add(new Message { Text = "Failed to reset password. Please try again", Severity = Severity.Error });
            }
        }
        catch (Exception ex)
        {
            messages.Add(new Message { Text = $"An error occurred: {ex.Message}", Severity = Severity.Error });
        }
        finally
        {
            isLoading = false;
        }
    }
}
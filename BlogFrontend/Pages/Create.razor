@page "/create-post"
@using BlogFrontend.Services
@using BlogFrontend.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IBlogService BlogService
@inject AIContentService AIContentService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Create New Post</MudText>

        <EditForm Model="@postModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <MudTextField T="string"
                          Label="Title"
                          @bind-Value="postModel.Title"
                          Required="true"
                          RequiredError="Title is required"
                          Class="mb-3" />

            <MudButton OnClick="GenerateAIContent"
                       Variant="Variant.Filled"
                       Color="Color.Info"
                       Disabled="@(string.IsNullOrWhiteSpace(postModel.Title) || isGenerating)"
                       Class="mb-3">
                @if (isGenerating)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Generating...</MudText>
                }
                else
                {
                    <MudText>Generate AI Content</MudText>
                }
            </MudButton>

            <MudText Class="mb-2">Content</MudText>
            <MudPaper Elevation="1" Class="border-radius-8 overflow-hidden mb-3">
                <MudToolBar Dense="true" Class="mud-background-gray px-4 py-2">
                    <MudTooltip Text="Bold">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="@(() => ExecuteTextCommand("bold"))" Color="@GetActiveColor("bold")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudTooltip Text="Italic">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="@(() => ExecuteTextCommand("italic"))" Color="@GetActiveColor("italic")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudTooltip Text="Underline">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatUnderlined" OnClick="@(() => ExecuteTextCommand("underline"))" Color="@GetActiveColor("underline")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudDivider Vertical="true" Class="mx-3" />
                    <MudTooltip Text="Heading 1">
                        <MudIconButton Icon="@Icons.Material.Filled.Title" OnClick="@(() => ExecuteTextCommand("formatBlock", "h1"))" Color="@GetActiveColor("h1")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudTooltip Text="Heading 2">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatSize" OnClick="@(() => ExecuteTextCommand("formatBlock", "h2"))" Color="@GetActiveColor("h2")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudDivider Vertical="true" Class="mx-3" />
                    <MudTooltip Text="Bulleted List">
                        <MudepisodeIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="@(() => ExecuteTextCommand("insertUnorderedList"))" Color="@GetActiveColor("ul")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudTooltip Text="Numbered List">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="@(() => ExecuteTextCommand("insertOrderedList"))" Color="@GetActiveColor("ol")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudDivider Vertical="true" Class="mx-3" />
                    <MudTooltip Text="Align Left">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatAlignLeft" OnClick="@(() => ExecuteTextCommand("justifyLeft"))" Color="@GetActiveColor("justifyLeft")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudTooltip Text="Align Center">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatAlignCenter" OnClick="@(() => ExecuteTextCommand("justifyCenter"))" Color="@GetActiveColor("justifyCenter")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                    <MudTooltip Text="Align Right">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatAlignRight" OnClick="@(() => ExecuteTextCommand("justifyRight"))" Color="@GetActiveColor("justifyRight")" Size="Size.Small" Class="mx-1" />
                    </MudTooltip>
                </MudToolBar>
                <div @ref="editorRef"
                     contenteditable="true"
                     class="p-4 font-size-16 line-height-1-6 editor-content"
                     style="min-height: 300px; max-height: 500px; overflow-y: auto;"
                     @oninput="OnContentChanged"
                     @onclick="UpdateActiveStyles"
                     @onkeyup="UpdateActiveStyles"></div>
            </MudPaper>

            <MudTextField T="string"
                          Label="Tags (comma-separated)"
                          @bind-Value="tagsInput"
                          Class="mb-3" />

            <MudField Label="Image" Class="mb-4">
                <InputFile id="fileInput" OnChange="HandleFileSelected" hidden />
                <div class="d-flex align-center">
                    <MudButton HtmlTag="label"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               for="fileInput">
                        Upload Image
                    </MudButton>
                    <MudText Class="ml-3">@(selectedFile?.Name ?? "No file selected")</MudText>
                </div>

                @if (imagePreview != null)
                {
                    <div class="mt-2">
                        <img src="@imagePreview" style="max-width: 100%; max-height: 300px;" />
                    </div>
                }
            </MudField>

            <div class="d-flex justify-space-between mt-4">
                <MudButton OnClick="GoBack"
                           Variant="Variant.Outlined"
                           Color="Color.Secondary">
                    Cancel
                </MudButton>
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Creating...</MudText>
                    }
                    else
                    {
                        <MudText>Create Post</MudText>
                    }
                </MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private class PostModel
    {
        public string Title { get; set; }
        public string Content { get; set; }
    }

    private PostModel postModel = new PostModel();
    private string tagsInput = "";
    private IBrowserFile selectedFile;
    private string imagePreview;
    private bool isSubmitting = false;
    private bool isGenerating = false;
    private ElementReference editorRef;
    private Dictionary<string, bool> activeStyles = new Dictionary<string, bool>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval",
                $"document.querySelector('[contenteditable]').innerHTML = '';");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            var buffer = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream(maxAllowedSize: 10485760).ReadAsync(buffer);
            var imageType = selectedFile.ContentType;
            imagePreview = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private void OnContentChanged(ChangeEventArgs args)
    {
        postModel.Content = args.Value?.ToString();
    }

    private async Task ExecuteTextCommand(string command, string value = null)
    {
        if (string.IsNullOrEmpty(value))
        {
            await JSRuntime.InvokeVoidAsync("document.execCommand", command, false, null);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("document.execCommand", command, false, value);
        }
        await UpdateActiveStyles();
    }

    private async Task UpdateActiveStyles()
    {
        activeStyles["bold"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "bold");
        activeStyles["italic"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "italic");
        activeStyles["underline"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "underline");
        string formatBlock = await JSRuntime.InvokeAsync<string>("document.queryCommandValue", "formatBlock");
        activeStyles["h1"] = formatBlock == "h1" || formatBlock == "H1";
        activeStyles["h2"] = formatBlock == "h2" || formatBlock == "H2";
        activeStyles["ul"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "insertUnorderedList");
        activeStyles["ol"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "insertOrderedList");
        activeStyles["justifyLeft"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "justifyLeft");
        activeStyles["justifyCenter"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "justifyCenter");
        activeStyles["justifyRight"] = await JSRuntime.InvokeAsync<bool>("document.queryCommandState", "justifyRight");
        StateHasChanged();
    }

    private Color GetActiveColor(string style)
    {
        return activeStyles.ContainsKey(style) && activeStyles[style]
            ? Color.Primary
            : Color.Default;
    }

    private async Task GenerateAIContent()
    {
        try
        {
            isGenerating = true;
            var generatedContent = await AIContentService.GenerateContentAsync(postModel.Title);
            postModel.Content = generatedContent;

            // Use a parameterized JS call to set the content
            await JSRuntime.InvokeVoidAsync("setEditorContent", editorRef, generatedContent);

            Snackbar.Add("Content generated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to generate content: {ex.Message}", Severity.Error);
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            var editorContent = await JSRuntime.InvokeAsync<string>(
                "eval", "document.querySelector('[contenteditable]').innerHTML");
            postModel.Content = editorContent;

            List<string> tags = new List<string>();
            if (!string.IsNullOrWhiteSpace(tagsInput))
            {
                tags = tagsInput.Split(',')
                    .Select(t => t.Trim())
                    .Where(t => !string.IsNullOrWhiteSpace(t))
                    .ToList();
            }

            var post = await BlogService.CreatePostAsync(
                postModel.Title,
                postModel.Content,
                tags,
                selectedFile
            );

            Snackbar.Add("Post created successfully!", Severity.Success);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create post: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
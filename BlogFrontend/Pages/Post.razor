@page "/"
@inherits LayoutComponentBase
@using BlogFrontend.Models
@using BlogFrontend.Services
@using System.Text.RegularExpressions
@inject IBlogService BlogService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<div class="blog-container">
    @if (loading)
    {
        <div class="blog-list">
            @for (int i = 0; i < 6; i++)
            {
                <MudCard Elevation="3" Class="blog-card skeleton-card mb-6">
                    <div class="d-flex flex-column flex-md-row">
                        <MudCardContent Class="flex-grow-1 pe-md-4">
                            <div class="d-flex align-center mb-2">
                                <div class="skeleton-avatar"></div>
                                <div class="skeleton-text-sm ml-2"></div>
                                <MudSpacer />
                                <div class="skeleton-text-xs"></div>
                            </div>

                            <div class="skeleton-text-lg mt-2 mb-3"></div>

                            <div class="skeleton-text-block"></div>
                            <div class="skeleton-text-block"></div>
                            <div class="skeleton-text-block" style="width: 70%"></div>

                            <div class="d-flex flex-wrap gap-1 mt-3">
                                <div class="skeleton-chip"></div>
                                <div class="skeleton-chip"></div>
                            </div>

                            <div class="d-flex justify-space-between mt-4">
                                <div class="d-flex align-center">
                                    <div class="skeleton-icon"></div>
                                    <div class="skeleton-text-xs ml-1"></div>
                                </div>

                                <div class="d-flex align-center">
                                    <div class="skeleton-icon"></div>
                                    <div class="skeleton-text-xs ml-1"></div>
                                </div>

                                <div class="skeleton-text-button"></div>
                            </div>
                        </MudCardContent>
                        <div class="skeleton-image-container">
                            <div class="skeleton-image"></div>
                        </div>
                    </div>
                </MudCard>
            }
        </div>
    }
    else if (posts == null || !posts.Any())
    {
        <MudPaper Elevation="3" Class="pa-6 ma-2 d-flex flex-column align-center">
            <MudText Class="mb-4">No posts available. Be the first to create a post!</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@NavigateToCreatePost">Create Post</MudButton>
        </MudPaper>
    }
    else
    {
        <div class="blog-list">
            @foreach (var post in posts)
            {
                <MudCard Elevation="3" Class="blog-card mb-6">
                    <div class="d-flex flex-column flex-md-row">
                        <MudCardContent Class="flex-grow-1 pe-md-4" @onclick="@(() => NavigateToPostDetails(post.Id))">
                            <div class="d-flex align-center mb-2">
                                <MudAvatar Color="Color.Primary" Size="Size.Small">@GetInitial(post.UserName)</MudAvatar>
                                <MudText Typo="Typo.body2" Class="ml-2">@post.UserName</MudText>
                                <MudSpacer />
                                <MudText Typo="Typo.caption">@post.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                            </div>

                            <MudText Typo="Typo.h5" Class="mt-2 mb-3 post-title">@post.Title</MudText>

                            <MudText Typo="Typo.body1" Class="post-preview">
                                @(GetContentPreview(post.Content))
                            </MudText>

                            @if (post.Tags != null && post.Tags.Any())
                            {
                                <div class="d-flex flex-wrap gap-1 mt-3">
                                    @foreach (var tag in post.Tags.Take(3))
                                    {
                                        <MudChip T="string" Color="Color.Default" Size="Size.Small">@tag</MudChip>
                                    }
                                    @if (post.Tags.Count > 3)
                                    {
                                        <MudChip T="string" Color="Color.Default" Size="Size.Small">+@(post.Tags.Count - 3)</MudChip>
                                    }
                                </div>
                            }

                            <div class="d-flex justify-space-between mt-4" @onclick:stopPropagation>
                                <div class="d-flex align-center">
                                    @if (post.LikedBy != null && post.LikedBy.Any(l => l.UserId == userId))
                                    {
                                        <div class="like-button" @onclick="@(() => UnlikePost(post.Id))">
                                            <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" Size="Size.Small" />
                                            <MudText Typo="Typo.caption" Class="ml-1">@post.Likes</MudText>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="like-button" @onclick="@(() => LikePost(post.Id))">
                                            <MudIcon Icon="@Icons.Material.Outlined.FavoriteBorder" Size="Size.Small" />
                                            <MudText Typo="Typo.caption" Class="ml-1">@post.Likes</MudText>
                                        </div>
                                    }
                                </div>

                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Outlined.Comment" Size="Size.Small" />
                                    <MudText Typo="Typo.caption" Class="ml-1">@(post.Comments?.Count ?? 0)</MudText>
                                </div>

                                <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small"
                                           Class="pa-0" @onclick="@(() => NavigateToPostDetails(post.Id))">
                                    Read More
                                </MudButton>
                            </div>
                        </MudCardContent>

                        <div class="blog-image-container" @onclick="@(() => NavigateToPostDetails(post.Id))">
                            @if (post.ImageBytes != null && post.ImageBytes.Length > 0)
                            {
                                <div class="blog-image" style="background-image: url('@($"data:image/jpeg;base64,{Convert.ToBase64String(post.ImageBytes)}")')"></div>
                            }
                            else
                            {
                                <div class="blog-image-placeholder"></div>
                            }
                        </div>
                    </div>
                </MudCard>
            }
        </div>
    }
</div>

<style>
    .blog-container {
        padding: 24px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .blog-list {
        display: flex;
        flex-direction: column;
    }

    .blog-card {
        width: 100%;
        overflow: hidden;
    }

        .blog-card MudCardContent {
            cursor: pointer;
        }

        .blog-card:hover {
            box-shadow: var(--mud-elevation-10);
        }

    .blog-image-container {
        flex: 0 0 300px;
        position: relative;
        overflow: hidden;
        cursor: pointer;
    }

    .blog-image {
        background-size: cover;
        background-position: center;
        height: 100%;
        min-height: 200px;
        transition: transform 0.3s ease;
    }

        .blog-image:hover {
            transform: scale(1.05);
        }

    .blog-image-placeholder {
        height: 100%;
        min-height: 200px;
        background-color: var(--mud-palette-primary-lighten);
    }

    .post-title {
        font-weight: 600;
        line-height: 1.3;
    }

    .post-preview {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        margin-bottom: 16px;
    }

    .like-button {
        display: flex;
        align-items: center;
        cursor: pointer;
    }

        .like-button:hover {
            opacity: 0.8;
        }

    /* Skeleton loading styles */
    .skeleton-card {
        pointer-events: none;
    }

    .skeleton-image-container {
        flex: 0 0 300px;
        position: relative;
    }

    .skeleton-image {
        height: 100%;
        min-height: 200px;
        background-color: #e0e0e0;
    }

    .skeleton-avatar {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        background-color: #e0e0e0;
    }

    .skeleton-text-xs {
        height: 14px;
        width: 60px;
        background-color: #e0e0e0;
        border-radius: 4px;
    }

    .skeleton-text-sm {
        height: 16px;
        width: 80px;
        background-color: #e0e0e0;
        border-radius: 4px;
    }

    .skeleton-text-lg {
        height: 28px;
        width: 80%;
        background-color: #e0e0e0;
        border-radius: 4px;
    }

    .skeleton-text-block {
        height: 16px;
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 4px;
        margin-bottom: 8px;
    }

    .skeleton-chip {
        height: 24px;
        width: 60px;
        background-color: #e0e0e0;
        border-radius: 16px;
    }

    .skeleton-icon {
        width: 18px;
        height: 18px;
        background-color: #e0e0e0;
        border-radius: 50%;
    }

    .skeleton-text-button {
        height: 16px;
        width: 80px;
        background-color: #e0e0e0;
        border-radius: 4px;
    }

    @@media (max-width: 768px) {
        .blog-image-container, .skeleton-image-container

    {
        flex: 0 0 auto;
        height: 200px;
        width: 100%;
    }

    }
</style>

@code {
    private List<BlogFrontend.Models.Post> posts;
    private bool loading = true;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userId = await AuthService.GetUserIdAsync();
            await LoadPosts();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading posts: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error loading posts: {ex.Message}");
            posts = new List<BlogFrontend.Models.Post>(); // Initialize to empty list on error
        }
        finally
        {
            loading = false;
            StateHasChanged(); // Force UI update
        }
    }

    private void NavigateToCreatePost()
    {
        NavigationManager.NavigateTo("/create-post");
    }

    private void NavigateToPostDetails(string postId)
    {
        NavigationManager.NavigateTo($"/post/{postId}");
    }

    private async Task LoadPosts()
    {
        try
        {
            posts = await BlogService.GetAllPostsAsync();

            if (posts != null)
            {
                foreach (var post in posts)
                {
                    post.ShowCommentForm = false;
                    post.NewComment = string.Empty;

                    // Ensure collections are initialized to prevent null reference exceptions
                    if (post.LikedBy == null)
                        post.LikedBy = new List<BlogFrontend.Models.Like>();

                    if (post.Comments == null)
                        post.Comments = new List<BlogFrontend.Models.Comment>();

                    if (post.Tags == null)
                        post.Tags = new List<string>();
                }
            }
            else
            {
                posts = new List<BlogFrontend.Models.Post>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load posts: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error in LoadPosts: {ex.Message}");
            posts = new List<BlogFrontend.Models.Post>();
        }
    }

    private string GetContentPreview(string content)
    {
        if (string.IsNullOrEmpty(content))
            return string.Empty;


        content = Regex.Replace(content, "<.*?>", string.Empty);


        if (content.Length > 150)
        {
            content = content.Substring(0, 150) + "...";
        }

        return content;
    }

    private string GetInitial(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "?";

        return name.Substring(0, 1).ToUpper();
    }

    private async Task LikePost(string postId)
    {
        try
        {
            var updatedPost = await BlogService.LikePostAsync(postId);
            if (updatedPost != null)
            {
                var post = posts.FirstOrDefault(p => p.Id == postId);
                if (post != null)
                {
                    post.Likes = updatedPost.Likes;
                    post.LikedBy = updatedPost.LikedBy;
                    StateHasChanged(); // Update UI to reflect the change
                }
                Snackbar.Add("Post liked successfully!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error liking post: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error liking post: {ex.Message}");
        }
    }

    private async Task UnlikePost(string postId)
    {
        try
        {
            var updatedPost = await BlogService.UnlikePostAsync(postId);
            if (updatedPost != null)
            {
                var post = posts.FirstOrDefault(p => p.Id == postId);
                if (post != null)
                {
                    post.Likes = updatedPost.Likes;
                    post.LikedBy = post.LikedBy.Where(l => l.UserId != userId).ToList();
                    StateHasChanged(); // Update UI to reflect the change
                }
                Snackbar.Add("Post unliked successfully!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error unliking post: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error unliking post: {ex.Message}");
        }
    }

    private void ToggleCommentForm(BlogFrontend.Models.Post post)
    {
        post.ShowCommentForm = !post.ShowCommentForm;
        if (!post.ShowCommentForm)
        {
            post.NewComment = string.Empty;
        }
    }

    private async Task AddComment(string postId)
    {
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null && !string.IsNullOrWhiteSpace(post.NewComment))
        {
            try
            {
                var success = await BlogService.AddCommentAsync(postId, post.NewComment);
                if (success)
                {
                    post.NewComment = string.Empty;
                    post.ShowCommentForm = false;
                    await LoadPosts();
                    Snackbar.Add("Comment added successfully!", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error adding comment: {ex.Message}", Severity.Error);
                Console.WriteLine($"Error adding comment: {ex.Message}");
            }
        }
    }

    private void EditPost(BlogFrontend.Models.Post post)
    {
        NavigationManager.NavigateTo($"/create-post/{post.Id}");
    }

    private async Task DeletePost(string postId)
    {
        try
        {
            var success = await BlogService.DeletePostAsync(postId);
            if (success)
            {
                await LoadPosts();
                Snackbar.Add("Post deleted successfully!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting post: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error deleting post: {ex.Message}");
        }
    }

    private bool IsCurrentUserAuthor(BlogFrontend.Models.Post post)
    {
        return post.UserId == userId;
    }

    private string FormatContent(string content)
    {
        if (string.IsNullOrEmpty(content))
            return string.Empty;

        var urlPattern = @"(https?:\/\/[^\s]+)";
        content = Regex.Replace(content, urlPattern, "<a href=\"$1\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>");
        content = content.Replace(Environment.NewLine, "<br />");
        return content;
    }
}
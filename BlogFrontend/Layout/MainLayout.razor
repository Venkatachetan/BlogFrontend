@inherits LayoutComponentBase
@using MudBlazor
@using BlogFrontend.Services
@using Blazored.LocalStorage
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService
@inject IBlogService BlogService
@inject IJSRuntime JS

<style>
    .primary {
        background-color: #EC1C24 !important; 
    }
    
    .secondary {
        background-color: #000000 !important; 
    }
    
    .gold {
        color: #D4AF37 !important; 
    }
    
    .text {
        color: #FFFFFF !important; 
    }
    
    .avatar {
        background-color: #000000 !important;
        color: #D4AF37 !important;
        border: 2px solid #D4AF37 !important;
    }
    
    .paper {
        background-color: #111111 !important;
        border: 1px solid #D4AF37 !important;
    }
    
    .button {
        background-color: #000000 !important;
        color: #D4AF37 !important;
        border: 1px solid #D4AF37 !important;
    }
    
    .button:hover {
        background-color: #D4AF37 !important;
        color: #000000 !important;
    }
    
    .divider {
        background-color: #D4AF37 !important;
        height: 2px !important;
    }
    
    .close-button {
        position: absolute;
        top: 8px;
        right: 8px;
        cursor: pointer;
    }
    
    .nav-bar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: #FFFFFF;
        display: flex;
        justify-content: space-around;
        padding: 10px 0;
        border-top: 1px solid #DDDDDD;
        z-index: 100;
    }
    
    .nav-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: #000000;
        text-decoration: none;
    }
    
    .nav-icon {
        font-size: 28px;
        margin-bottom: 4px;
    }
    
    .active-nav-item {
        color: #EC1C24 !important;
    }
    
    .main-content-with-nav {
        padding-bottom: 64px;
    }
    
    .notification-icon {
        color: #FFFFFF !important;
        cursor: pointer;
    }

    .notification-container {
        position: relative;
        display: inline-block;
    }

    .notification-dot {
        position: absolute;
        top: 5px;
        right: 10px;
        width: 10px;
        height: 10px;
        background: red;
        border-radius: 50%;
        border: 2px solid white;
        z-index: 10;
    }
</style>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider /> 
<MudPopoverProvider />
<AuthorizeView>
    <Authorizing>
    </Authorizing>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        @if (authChecked)
        {
            <MudLayout>
                <MudAppBar Elevation="3" Class="primary">
                    <MudText Typo="Typo.h5" Class="ml-3 text" Style="font-weight: bold; letter-spacing: 1px;">Wise_Blogs</MudText>
                    <MudSpacer />
                    <div class="notification-container">
                        <MudIconButton Icon="@Icons.Material.Filled.Notifications" 
                                      Color="Color.Inherit" 
                                      Class="notification-icon"
                                      @onclick="NavigateToNotifications" />
                        @if (unreadNotifications > 0)
                        {
                            <div class="notification-dot"></div>
                        }
                    </div>
                </MudAppBar>
                
                <MudMainContent Style="background-color: #FFFFFF; min-height: calc(100vh - 64px);" Class="main-content-with-nav">
                    @Body
                  
                    <div class="nav-bar">
                        <div class="nav-item @(IsActive("/") ? "active-nav-item" : "")" @onclick="NavigateToHome">
                            <MudIcon Icon="@Icons.Material.Filled.Home" Class="nav-icon" />
                        </div>
                        <div class="nav-item @(IsActive("/feed") ? "active-nav-item" : "")" @onclick="NavigateToFeed">
                            <MudIcon Icon="@Icons.Material.Filled.Search" Class="nav-icon" />
                        </div>
                        <div class="nav-item @(IsActive("/create-post") ? "active-nav-item" : "")" @onclick="NavigateToCreatePost">
                            <MudIcon Icon="@Icons.Material.Filled.Add" Class="nav-icon" />
                        </div>
                        <div class="nav-item @(IsActive("/profile") ? "active-nav-item" : "")" @onclick="NavigateToProfile">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Class="nav-icon" />
                        </div>
                    </div>
                </MudMainContent>
            </MudLayout>
        }
        else
        {
            <div class="d-flex justify-center align-center" style="height: 100vh; background-color: #FFFFFF;">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Error" />
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    private bool authChecked = false;
    private bool _isOpen = false;
    private string userName = string.Empty;
    private string userId = string.Empty;
    private string userEmail = string.Empty;
    private int unreadNotifications = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            
            if (!string.IsNullOrEmpty(token))
            {
                userName = await AuthService.GetUserNameAsync();
                userId = await AuthService.GetUserIdAsync();
                
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(token);
                userEmail = jwtToken.Claims.FirstOrDefault(c => c.Type == "email")?.Value ?? string.Empty;
                
                var authResult = await AuthService.CheckAuth(token);
                if (authResult == null)
                {
                    Navigation.NavigateTo("/login");
                    return;
                }

                await BlogService.InitializeSignalRAsync();
                BlogService.OnNotificationReceived += HandleNotification;
            }
            else
            {
                Navigation.NavigateTo("/login");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authentication error: {ex.Message}");
            Navigation.NavigateTo("/login");
            return;
        }
        finally
        {
            authChecked = true;
            StateHasChanged();
        }
    }

    private void HandleNotification(string message)
    {
        InvokeAsync(() =>
        {
            unreadNotifications++;
            StateHasChanged();
        });
    }
    
    private string GetFirstLetter(string name)
    {
        return !string.IsNullOrEmpty(name) ? name[0].ToString().ToUpper() : "?";
    }
    
    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }
    
    private void NavigateToFeed()
    {
        Navigation.NavigateTo("/feed");
    }
    
    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/profile");
    }
    
    private void NavigateToCreatePost()
    {
        Navigation.NavigateTo("/create-post");
    }
    
    private void NavigateToNotifications()
    {
        unreadNotifications = 0;
        Navigation.NavigateTo("/notifications");
    }
    
    private async Task HandleLogout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthService.Logout();
        Navigation.NavigateTo("/login", forceLoad: true);
    }
    
    private bool IsActive(string href)
    {
        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();
        return href == "/" ? relativePath == "" : relativePath.StartsWith(href.TrimStart('/').ToLower());
    }
}